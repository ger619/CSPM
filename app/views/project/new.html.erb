<div class="grid grid-cols-2 ">
  <div class="grid col-span-1">
    <div class="flex gap-1">
      <%= button_to project_index_path, method: :get, class: 'mb-4 border border-b-4 border-r-2 border-black dark:border-slate-100 p-2 rounded font-semibold' do %>
        &#8656; Back
      <% end %>
    </div>
  </div>
</div>
<div class="p-4 border border-dashed rounded">
  <%= form_with  model: @project, url: project_index_url, method: :post, data: { turbo: false }, local: true do |f| %>
    <div class="md:gap-6">
      <div class="relative z-0 w-full mb-6 group">
        <%= f.label :title, ('Title *'), class: "capitalize block mb-1 text-sm font-medium text-gray-900 dark:text-white", required: true  %><br />
        <%= f.text_field :title, class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500", placeholder: '', required: true %>
      </div>

      <div class="grid grid-cols-2 gap-2">
        <div class="relative z-0 w-full mb-6 group">
          <%= f.label :title, ('Project Description *'), class: "capitalize block mb-1 text-sm font-medium"  %><br />
          <%= f.text_field :description, class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500", placeholder: '', required: true %>
        </div>
        <div class="relative z-0 w-full mb-6 group">
          <%= f.label :Assignee, ('Assignee *'), class: "capitalize block mb-1 text-sm font-medium text-gray-900 dark:text-white"  %><br />
          <%= f.select :user_id, User.with_agent_project_manager_role.order(:first_name, :last_name).map { |user| [user.name, user.id] }, {},class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500", placeholder: 'Assign User', required: true %>
        </div>
        <div class="relative z-0 w-full mb-6 group">
          <%= f.label :software, ('Product Categories *'), class: "capitalize block mb-1 text-sm font-medium" %>
          <%= f.collection_select :software_id, Software.all, :id, :name, { prompt: "Select Product" }, class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500", data: { action: "change->form#updateGroupwareOptions" } %>
        </div>

        <div class="relative z-0 w-full mb-6 group">
          <%= f.label :software, ('Sub Product *'), class: "capitalize block mb-1 text-sm font-medium" %>
          <%= f.collection_select :groupware_id, Groupware.distinct, :id, :name, { prompt: "Select The Product" }, class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500", id: "groupware-select" %>        </div>
      </div>
      <div class="grid grid-cols-2 gap-2">
        <div class="relative z-0 w-full mb-6 group">
          <%= f.label :software, ('Client Available *'), class: "capitalize block mb-1 text-sm font-medium" %>
          <%= f.collection_select :client_id, Client.all, :id, :name, { prompt: "Select Product" }, class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500" %>
        </div>
        <div class="relative z-0 w-full mb-6 group">
          <%= f.label :start_date, 'Start Date *', class: "capitalize block mb-1 text-sm font-medium"  %><br />
          <%= f.date_field :start_date, class: "border border-gray-300 rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:ring-blue-500 dark:focus:border-blue-500", placeholder: '', required: true %>
        </div>
      </div>
      <div class="relative z-0 w-full mb-6 group">
        <%= f.label :title, ('Subject *'), class: "capitalize block mb-1 text-sm font-medium" %><br />
        <div data-controller="text-limit" data-text-limit-limit-value="800">
          <p id="char-count">0/800</p>
          <%= f.rich_text_area :content, id: "content",
                               data: { text_limit_target: "content" },
                               class: "min-h-[300px] #{'border-red-500' if @project.errors[:content].any?}",
                               required: true %>
          <% if @project.errors[:content].any? %>
            <p class="text-red-500"><%= @project.errors[:content].join(', ') %></p>
          <% end %>
        </div>
      </div>

    </div>
    <%= f.submit  class: 'mb-4 h-12 border border-black dark:border-white border-b-4 border-r-2 p-3 rounded font-semibold rounded'  %>
  <% end %>
</div>

<script>
  document.addEventListener('turbo:load', () => {
    const form = document.querySelector('form');
    const contentField = document.querySelector('[data-trix-editor]'); // Select the rich text editor container
    const errorMessage = document.getElementById('content-error');

    form.addEventListener('submit', (event) => {
      const editorContent = contentField.editor.getDocument().toString().trim(); // Use Trix editor API to get the text content

      if (!editorContent) {
        event.preventDefault(); // Stop form submission
        errorMessage.classList.remove('hidden'); // Show the error message
        contentField.classList.add('border-red-500'); // Add red border
      } else {
        errorMessage.classList.add('hidden'); // Hide error message
        contentField.classList.remove('border-red-500'); // Remove red border
      }
    });
  });

  document.addEventListener('turbo:load', function() {
    const softwareSelect = document.querySelector('[data-action="change->form#updateGroupwareOptions"]');
    const groupwareSelect = document.getElementById('groupware-select');

    if (softwareSelect && groupwareSelect) {
      softwareSelect.addEventListener('change', function() {
        const softwareId = this.value;

        // Clear existing options
        groupwareSelect.innerHTML = '<option value="">Select The Product</option>';

        if (softwareId) {
          fetch(`/groupwares?software_id=${softwareId}`, { headers: { Accept: 'application/json' } })
            .then(response => response.json())
            .then(data => {
              data.forEach(groupware => {
                const option = document.createElement('option');
                option.value = groupware.id;
                option.textContent = groupware.name;
                groupwareSelect.appendChild(option);
              });
            })
            .catch(error => console.error('Error fetching groupwares:', error));
        }
      });
    }
  });
</script>