<div class="container mx-auto mb-6 p-6">
  <div class="flex justify-between items-center">
    <div class="relative w-80">
        <input type="text" id="search" class="w-full px-4 py-2 border rounded-lg text-black" placeholder="Search SLA Tracking..." onkeyup="filterDropdown()">
        <div id="dropdown" class="absolute w-full bg-white border rounded-lg mt-1 shadow-lg max-h-40 overflow-y-auto hidden">
            <% @softwares.each do |software| %>
            <div class="dropdown-item px-4 py-2 hover:bg-gray-100 cursor-pointer text-black" onclick="selectItem(this)">
              <%= software.name %>
            </div>
            <%end%>
        </div>
    </div>

    <h1 class="text-3xl font-bold">All Stats Within Last 30 Days</h1>

    <button type="button" class="text-white bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 hover:bg-gradient-to-br focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2">Refresh</button>
</div>

  <!-- Stats Section -->
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 mb-8 mt-6 text-black">
    <%= render 'dashboards/stat_card', title: "Initial Response Time - Breached", value: @stats[:breached_tickets_last_30_days], id: "initial_response_time_breached" %>
    <%= render 'dashboards/stat_card', title: "Initial Response Time - Not Breached", value: @stats[:not_breached_tickets_last_30_days], id: "initial_response_time_not_breached" %>
    <%= render 'dashboards/stat_card', title: "Target Repair Time - Breached", value: @stats[:response_breached_tickets_last_30_days], id: "target_repair_time_breached" %>
    <%= render 'dashboards/stat_card', title: "Target Repair Time - Not Breached", value: @stats[:not_response_breached_tickets_last_30_days], id: "target_repair_time_not_breached" %>
    <%= render 'dashboards/stat_card', title: "Target Resolution Time - Breached", value: @stats[:resolution_breached_tickets_last_30_days], id: "target_resolution_time_breached" %>
    <%= render 'dashboards/stat_card', title: "Target Resolution Time - Not Breached", value: @stats[:not_resolution_breached_tickets_last_30_days], id: "target_resolution_time_not_breached" %>
    <%= render 'dashboards/stat_card', title: "No SLA Count", value: "0", id: "no_sla_count" %>
    <%= render 'dashboards/stat_card', title: "Total Tickets Last 30 days", value: @stats[:total_tickets_last_30_days], id: "total_tickets_last_30_days" %>
  </div>

  <!-- Charts Section -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-black">
    <div class="bg-white p-4 shadow-md rounded-lg">
      <h2 class="text-lg font-semibold mb-3 text-center">Response Time (Breached vs Not Breached)</h2>
      <%= render 'dashboards/pie_chart', chart_id: "responseTimeChart" %>
    </div>

    <div class="bg-white p-4 shadow-md rounded-lg">
      <h2 class="text-lg font-semibold mb-3 text-center">Target Resolution Time (Not Breached)</h2>
      <%= render 'dashboards/pie_chart', chart_id: "salesChart" %>
    </div>
  </div>
</div>

<script>
  function filterDropdown() {
      let input = document.getElementById("search").value.toLowerCase();
      let dropdown = document.getElementById("dropdown");
      let items = dropdown.getElementsByClassName("dropdown-item");
      dropdown.classList.remove("hidden");

      for (let item of items) {
          let text = item.textContent || item.innerText;
          item.style.display = text.toLowerCase().includes(input) ? "block" : "none";
      }
  }

  function selectItem(element) {
      const softwareName = element.textContent;
      document.getElementById("search").value = softwareName;
      document.getElementById("dropdown").classList.add("hidden");

      // Make AJAX request to fetch the stats for the selected software
      fetch(`/dashboards/fetch_stats?software_name=${softwareName}`)
      .then(response => response.json())
      .then(data => {
          // Ensure the elements exist before updating them
          const totalTicketsEl = document.getElementById("total_tickets_last_30_days");
          const breachCountEl = document.getElementById("initial_response_time_breached");
          const notBreachCountEl = document.getElementById("initial_response_time_not_breached");
          const responseBreachCountEl = document.getElementById("target_repair_time_breached");
          const notResponseBreachCountEl = document.getElementById("target_repair_time_not_breached");
          const resolutionBreachCountEl = document.getElementById("target_resolution_time_breached");
          const notResolutionBreachCountEl = document.getElementById("target_resolution_time_not_breached");

          if (totalTicketsEl) totalTicketsEl.innerText = data.total_tickets_last_30_days;
          if (breachCountEl) breachCountEl.innerText = data.breached_tickets_last_30_days;
          if (notBreachCountEl) notBreachCountEl.innerText = data.not_breached_tickets_last_30_days;
          if (responseBreachCountEl) responseBreachCountEl.innerText = data.response_breached_tickets_last_30_days;
          if (notResponseBreachCountEl) notResponseBreachCountEl.innerText = data.not_response_breached_tickets_last_30_days;
          if (resolutionBreachCountEl) resolutionBreachCountEl.innerText = data.resolution_breached_tickets_last_30_days;
          if (notResolutionBreachCountEl) notResolutionBreachCountEl.innerText = data.not_resolution_breached_tickets_last_30_days;
      })
      .catch(error => {
          console.error("Error fetching stats:", error);
      });
  }


  function updateStatValues(data) {
      // Loop through each stat and update the value based on its title
      const statCards = document.querySelectorAll('.stat-card');
      statCards.forEach(card => {
          const title = card.querySelector('.title').innerText;  // Get the stat title

          if (data[title]) {
              // Update the value only if it exists in the data
              const valueElement = card.querySelector('.value');
              valueElement.innerText = data[title];
          }
      });
  }

   document.addEventListener("click", function(event) {
      let searchInput = document.getElementById("search");
      let dropdown = document.getElementById("dropdown");
      if (!searchInput.contains(event.target) && !dropdown.contains(event.target)) {
          dropdown.classList.add("hidden");
      }
  });
</script>
