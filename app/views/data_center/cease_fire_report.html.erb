  <h1 class="flex justify-center text-2xl font-bold mb-4"><% if current_user.has_role?(:admin) or current_user.has_role?('project manager') %>
      Cease Fire Report
      <% else %>
        Status Report
      <% end %>
      <span class="text-xs p-2 text-red">(Leave the date field blank if you want all the data from inception to date*)</span>
  </h1>
<div class="p-2 w-full flex-wrap">
  <%= form_with url: cease_fire_report_path, method: :get, local: true do |f| %>
    <div class="flex flex-wrap justify-center gap-2">
      <div class="flex flex-col gap-2">
        <%= f.label :status, "Status", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.select :status,
                     options_from_collection_for_select(Status.where(name: ['New', 'Closed', 'Resolved', 'Reopened', 'Under Development', 'Work in Progress', 'QA Testing', 'Awaiting Build', 'Client Confirmation Pending', 'On-Hold', 'Assigned', 'Declined']), :name, :name, params[:status]),
                     { include_blank: 'All Statuses', multiple: true },
                     class: "border border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-lg w-full bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100", id: "statusSelect" %>
      </div>
      <script>
        document.addEventListener('turbo:load', function() {
          const statusSelect = document.getElementById('statusSelect');

          statusSelect.addEventListener('change', function() {
            const allStatuses = Array.from(statusSelect.options).slice(1); // Exclude the blank option
            const blankOption = statusSelect.options[0];

            if (blankOption.selected) {
              allStatuses.forEach(option => option.selected = true);
            } else {
              blankOption.selected = false;
            }
          });
        });
      </script>

      <div class="flex flex-col relative gap-2">
          <label for="searchClient" class="capitalize text-sm font-bold w-full align-middle pt-3">Client</label>
          <!-- Searchable Input -->
          <input type="text" id="searchClient" class="border border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-lg bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100 w-full px-4 py-2" placeholder="Search Client..." onkeyup="filterClientDropdown()">
          <!-- Dropdown List -->
        <!-- Dropdown List with Checkboxes -->
        <div id="clientDropdown" class="absolute top-20 left-0 w-full bg-white border border-[#3F8CFF] rounded-lg mt-1 shadow-lg max-h-60 overflow-y-auto hidden z-10">
          <div class="dropdown-item px-4 py-2 hover:bg-gray-100 cursor-pointer bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100">
            <label>
              <input type="checkbox" value="" data-client-name="All Clients" class="client-checkbox mr-2">
              All Clients
            </label>
          </div>
          <% (current_user.has_role?(:admin) || current_user.has_role?(:observer) ? Client.all : Client.joins(:projects).where(projects: { id: current_user.projects.pluck(:id) }).distinct).each do |client| %>
            <div class="dropdown-item px-4 py-2 hover:bg-gray-100 cursor-pointer bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100">
              <label>
                <input type="checkbox" value="<%= client.id %>" data-client-name="<%= client.name %>" class="client-checkbox mr-2">
                <%= client.name %>
              </label>
            </div>
          <% end %>
        </div>

        <!-- Hidden Input to store multiple selected client IDs -->
        <div id="selectedClientsWrapper"></div>

      </div>


      <div class="flex flex-col gap-2">
        <%= f.label :start_date, "Start Date", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.date_field :start_date, value: params[:start_date], class: "border py-2 px-4 border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-md dark:bg-gray-900" %>
      </div>

      <div class="flex flex-col gap-2">
        <%= f.label :end_date, "End Date", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.date_field :end_date, value: params[:end_date], class: "border py-2 px-4 border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-md dark:bg-gray-900" %>
      </div>
      <div class="flex flex-col gap-2">
        <%= f.label :priority, "Severity", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.select :priority,
                     options_for_select(['SEVERITY 1', 'SEVERITY 2', 'SEVERITY 3', 'SEVERITY 4'], params[:priority]),
                     { include_blank: 'All Severities' },
                     prompt: 'Select Priority',
                     class: "border py-2 pl-4 pr-8 border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-md dark:bg-gray-900" %>

      </div>
      <div class="flex  flex-col gap-2 pt-10">
        <%= f.submit "Generate Report", class: 'bg-[#3F8CFF] hover:bg-[#3A81EB] p-3 rounded font-bold rounded-lg text-slate-100 w-full sm:w-auto' %>
      </div>
    </div>
  <% end %>
</div>

<% if @tickets.any? %>
  <div class="mx-auto mb-4 px-4 sm:px-6 lg:px-8 py-8">
    <h2 class="text-xl font-bold mb-4 text-center capitalize">
      Ticket Status Report AS AT <%= Date.today %> for <%= params[:client_id].present? ? Client.find(params[:client_id]).name : 'All Clients' %>
    </h2>
    <div class="grid grid-cols-3">
      <div class="col-span-2">
        <%= pie_chart @status_counts, height: "400px", library: { title: { text: "Ticket Status Distribution" } } %>
      </div>

      <div class="col-span-1">
        <div class="p-2">
          <h1 class="font-semibold">Total Tickets</h1>
          <% @status_counts.each do |status, count| %>
            <li><%= status %>: <%= count %></li>
          <% end %>
        </div>
      </div>
    </div>
  </div>
  <div class="mx-auto mb-4 px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex justify-end gap-2">
      <%= link_to "Download CSV",
                  cease_fire_report_path(
                    format: :xlsx,
                    start_date: params[:start_date],
                    end_date: params[:end_date],
                    priority: params[:priority],
                    status: params[:status],
                    client_ids: params[:client_ids]
                  ),
                  class: "bg-[#3F8CFF] hover:bg-[#3A81EB] p-2 rounded font-bold rounded-lg text-slate-100" %>

      <%= form_with url: cease_fire_report_path, method: :get, local: true do |f| %>
        <%= f.submit "Clear", class: 'bg-gray-500 hover:bg-gray-700 p-2 rounded font-bold rounded-lg text-slate-100' %>
      <% end %>
    </div>
    <table id="ceasefire" class="table-auto w-full mt-2">
      <thead>
      <tr>
        <th class="border border-black px-4 py-2">Ticket ID</th>
        <th class="border border-black px-4 py-2">Project Name</th>
        <th class="border border-black px-4 py-2">Severity</th>
        <th class="border border-black px-4 py-2">Summary</th>
        <th class="border border-black px-4 py-2">Issue Type</th>
        <th class="border border-black px-4 py-2">Status</th>
        <th class="border border-black px-4 py-2">Assigned To</th>
        <th class="border border-black px-4 py-2">Reporter</th>
        <th class="border border-black px-4 py-2">Details</th>
        <th class="border border-black px-4 py-2">Created</th>
        <th class="border border-black px-4 py-2">Status Updated At</th>
        <th class="border border-black px-4 py-2">Last Comment Updated At</th>
        <th class="border border-black px-4 py-2">Due Date</th>
        <th class="border border-black px-4 py-2">View</th>

      </tr>
      </thead>
      <tbody>
      <% @tickets.each do |ticket| %>
        <% row_class = case ticket.statuses.first&.name
                       when 'New'
                         'bg-red-500'
                       when 'Closed', 'Resolved'
                         'bg-emerald-100 text-black'
                       when 'Reopened'
                         'bg-red-900 text-slate-100'
                       when 'Under Development'
                         'bg-blue-300'
                       when 'Work in Progress'
                         'bg-[#CCCCCC] text-black'
                       when 'QA Testing'
                         'bg-pink-500'
                       when 'Awaiting Build'
                         'bg-gray-800 text-slate-100'
                       when 'Client Confirmation Pending'
                         'bg-yellow-100 text-black'
                       when 'On-Hold'
                         'bg-red-600 text-slate-100'
                       when 'Assigned'
                         'bg-blue-800 text-slate-100'
                       when 'Declined'
                         'bg-gray-800 text-slate-100'
                       else
                         ''
                       end %>
        <tr class="<%= row_class %>">
          <td class="border border border-black px-4 py-2"><%= ticket.unique_id %></td>
          <td class="border border border-black px-4 py-2"><%= ticket.project.title %></td>
          <td class="border border border-black px-4 py-2"><%= ticket.priority %></td>
          <td class="border border border-black px-4 py-2"><%= ticket.subject %></td>
          <td class="border border border-black px-4 py-2"><%= ticket.issue %></td>
          <td class="border border border-black px-4 py-2"><%= ticket.statuses.first&.name || "N/A" %></td>
          <td class="border border border-black px-4 py-2">
            <% ticket.users.each do |user| %>
              <% if user.name.present? %>
                <%= user.name %>
              <% end %>
            <% end %>
          </td>
          <td class="border border border-black px-4 py-2"><%= ticket.user.name %></td>
          <td class="border border border-black px-4 py-2 "><%= ticket.content.to_plain_text.truncate(3000) %></td>
          <td class="border border border-black px-4 py-2"><%= ticket.created_at.strftime("%d- %b -%y") %></td>
          <td class="border border-black px-4 py-2"><%= ticket.add_statuses.order(updated_at: :desc).first&.updated_at&.strftime('%H:%M of %d-%b-%Y ') || 'N/A' %></td>
          <td class="border border-black px-4 py-2"><%= ticket.issues.order(updated_at: :desc).first&.updated_at&.strftime('%d-%b-%Y %H:%M:%S') || 'N/A' %></td>
          <td class="border border-black px-4 py-2"><%= ticket.due_date&.strftime('%d-%b-%Y') || 'N/A' %></td>
          <td class="border border-black px-4 py-2">
            <%= link_to 'VIEW', project_ticket_path(ticket.project, ticket), target: "_blank", class: 'bg-[#3F8CFF] hover:bg-[#3A81EB] p-2 rounded font-bold rounded-md text-slate-100' %>
          </td>
        </tr>
      <% end %>
      </tbody>
    </table>
  </div>
<% end %>

  <script>
    document.addEventListener("turbo:load", () => {
      const searchInput = document.getElementById("searchClient");
      const dropdown = document.getElementById("clientDropdown");
      const selectedWrapper = document.getElementById("selectedClientsWrapper");

      function updateSelections() {
        let selectedNames = [];
        selectedWrapper.innerHTML = ""; // Clear previous hidden fields

        document.querySelectorAll(".client-checkbox:checked").forEach((checkbox) => {
          const clientName = checkbox.dataset.clientName;
          const clientId = checkbox.value;

          if (clientName) selectedNames.push(clientName);
          if (clientId) {
            const input = document.createElement("input");
            input.type = "hidden";
            input.name = "client_ids[]";
            input.value = clientId;
            selectedWrapper.appendChild(input);
          }
        });

        searchInput.value = selectedNames.join(", ");
      }

      // Show dropdown on click
      searchInput.addEventListener("click", () => {
        dropdown.classList.remove("hidden");
      });

      // Filter dropdown based on search input
      searchInput.addEventListener("keyup", () => {
        const searchValue = searchInput.value.toLowerCase();
        const items = dropdown.querySelectorAll(".dropdown-item");

        items.forEach((item) => {
          const label = item.textContent.toLowerCase();
          item.style.display = label.includes(searchValue) ? "block" : "none";
        });
      });

      // Apply selection logic to all checkboxes
      document.querySelectorAll(".client-checkbox").forEach((cb) => {
        cb.addEventListener("change", updateSelections);
      });

      // Hide dropdown when clicking outside
      document.addEventListener("click", function (event) {
        if (!dropdown.contains(event.target) && !searchInput.contains(event.target)) {
          dropdown.classList.add("hidden");
        }
      });
    });
  </script>
