<h1 class="flex justify-center text-2xl font-bold mb-4">
  <% if current_user.has_role?(:admin) or current_user.has_role?('project manager') %>
    Cease Fire Report
  <% else %>
    Status Report
  <% end %>
  <span class="text-xs p-2 text-red">(Leave the date field blank if you want all the data from inception to date*)</span>
</h1>
<div class="p-2 w-full flex-wrap">
  <%= form_with url: cease_fire_report_path, method: :get, local: true do |f| %>
    <div class="flex flex-wrap justify-center gap-2">
      <div class="flex flex-col relative gap-2">
        <label for="searchStatus" class="capitalize text-sm font-bold w-full align-middle pt-3">Status</label>
        <!-- Searchable Input -->
        <input type="text" id="searchStatus" class="border border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-lg bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100 w-full px-4 py-2" placeholder="Search Status...">
        <!-- Dropdown List -->
        <div id="statusDropdown" class="absolute top-20 left-0 w-full bg-white border border-[#3F8CFF] rounded-lg mt-1 shadow-lg max-h-60 overflow-y-auto hidden z-10">
          <% ['New', 'Resolved', 'Closed', 'Reopened', 'Under Development', 'QA Testing', 'Awaiting Build', 'Client Confirmation Pending', 'On-Hold', 'Assigned', 'Declined', 'Work in Progress'].each do |status| %>
            <div class="dropdown-item px-4 py-2 hover:bg-gray-100 cursor-pointer bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100">
              <label>
                <input type="checkbox" value="<%= status %>" data-status-name="<%= status %>" class="status-checkbox mr-2 capitalize">
                <%= status %>
              </label>
            </div>
          <% end %>
        </div>

        <!-- Hidden Input to store multiple selected statuses -->
        <div id="selectedStatusesWrapper"></div>
      </div>
      <% if !current_user.has_role?(:ceo) %>
      <div class="flex flex-col relative gap-2">
        <label for="searchClient" class="capitalize text-sm font-bold w-full align-middle pt-3">Client</label>
        <!-- Searchable Input -->
        <input type="text" id="searchClient" class="border border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-lg bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100 w-full px-4 py-2" placeholder="Search Client..." onkeyup="filterClientDropdown()">
        <!-- Dropdown List -->
        <!-- Dropdown List with Checkboxes -->
        <div id="clientDropdown" class="absolute top-20 left-0 w-full bg-white border border-[#3F8CFF] rounded-lg mt-1 shadow-lg max-h-60 overflow-y-auto hidden z-10">
          <div class="dropdown-item px-4 py-2 hover:bg-gray-100 cursor-pointer bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100">
            <label>
              <input type="checkbox" value="" data-client-name="All Clients" class="client-checkbox mr-2">
              All Clients
            </label>
          </div>
          <% (current_user.has_role?(:admin) || current_user.has_role?(:observer) ? Client.all : Client.joins(:projects).where(projects: { id: current_user.projects.pluck(:id) }).distinct).each do |client| %>
            <div class="dropdown-item px-4 py-2 hover:bg-gray-100 cursor-pointer bg-slate-100 dark:bg-gray-900 text-gray-900 dark:text-slate-100">
              <label>
                <input type="checkbox" value="<%= client.id %>" data-client-name="<%= client.name %>" class="client-checkbox mr-2 capitalize">
                <%= client.name %>
              </label>
            </div>
          <% end %>
        </div>

        <!-- Hidden Input to store multiple selected client IDs -->
        <div id="selectedClientsWrapper"></div>

      </div>
      <% end %>


      <div class="flex flex-col gap-2">
        <%= f.label :start_date, "Start Date", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.date_field :start_date, value: params[:start_date], class: "border py-2 px-4 border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-md dark:bg-gray-900" %>
      </div>

      <div class="flex flex-col gap-2">
        <%= f.label :end_date, "End Date", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.date_field :end_date, value: params[:end_date], class: "border py-2 px-4 border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-md dark:bg-gray-900" %>
      </div>
      <div class="flex flex-col gap-2">
        <%= f.label :priority, "Severity", class: "capitalize text-sm font-bold w-full align-middle pt-3" %>
        <%= f.select :priority,
                     options_for_select(['SEVERITY 1', 'SEVERITY 2', 'SEVERITY 3', 'SEVERITY 4'], params[:priority]),
                     { include_blank: 'All Severities' },
                     prompt: 'Select Priority',
                     class: "border py-2 pl-4 pr-8 border-[#3F8CFF] hover:border-[#3A81EB] border-2 rounded-md dark:bg-gray-900" %>

      </div>
      <div class="flex  flex-col gap-2 pt-10">
        <%= f.submit "Generate Report", class: 'bg-[#3F8CFF] hover:bg-[#3A81EB] p-3 rounded font-bold rounded-lg text-slate-100 w-full sm:w-auto' %>
      </div>
    </div>
  <% end %>
</div>

<%= render 'data_center/ticket_cease' %>

<script>
  document.addEventListener("turbo:load", () => {
    // Common function to update selections
    function updateSelections(inputId, wrapperId, checkboxClass, inputName, dataAttr) {
      const searchInput = document.getElementById(inputId);
      const selectedWrapper = document.getElementById(wrapperId);
      let selectedNames = [];
      selectedWrapper.innerHTML = ""; // Clear previous hidden fields

      document.querySelectorAll(`.${checkboxClass}:checked`).forEach((checkbox) => {
        const name = checkbox.dataset[dataAttr];
        const value = checkbox.value;

        if (name) selectedNames.push(name);
        if (value) {
          const input = document.createElement("input");
          input.type = "hidden";
          input.name = inputName;
          input.value = value;
          selectedWrapper.appendChild(input);
        }
      });

      searchInput.value = selectedNames.join(", ");
    }

    // Common function to handle dropdown visibility and filtering
    function setupDropdown(inputId, dropdownId, checkboxClass, wrapperId, inputName, dataAttr) {
      const searchInput = document.getElementById(inputId);
      const dropdown = document.getElementById(dropdownId);

      // Show dropdown on click
      searchInput.addEventListener("click", () => {
        dropdown.classList.remove("hidden");
      });

      // Filter dropdown based on search input
      searchInput.addEventListener("keyup", () => {
        const searchValue = searchInput.value.toLowerCase();
        const items = dropdown.querySelectorAll(".dropdown-item");

        items.forEach((item) => {
          const label = item.textContent.toLowerCase();
          item.style.display = label.includes(searchValue) ? "block" : "none";
        });
      });

      // Apply selection logic to all checkboxes
      document.querySelectorAll(`.${checkboxClass}`).forEach((cb) => {
        cb.addEventListener("change", () => {
          updateSelections(inputId, wrapperId, checkboxClass, inputName, dataAttr);
        });
      });

      // Hide dropdown when clicking outside
      document.addEventListener("click", function (event) {
        if (!dropdown.contains(event.target) && !searchInput.contains(event.target)) {
          dropdown.classList.add("hidden");
        }
      });
    }

    // Setup for "Status" dropdown
    setupDropdown(
      "searchStatus",
      "statusDropdown",
      "status-checkbox",
      "selectedStatusesWrapper",
      "status[]",
      "statusName"
    );

    // Setup for "Client" dropdown
    setupDropdown(
      "searchClient",
      "clientDropdown",
      "client-checkbox",
      "selectedClientsWrapper",
      "client_ids[]",
      "clientName"
    );
  });
</script>