<% if current_user && user_signed_in? %>
  <div class="flex justify-between items-center p-4 mb-6 bg-white shadow-md dark:bg-gray-800">
    <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">
      <%= greeting_message %>, <%= current_user.first_name %> <%= current_user.last_name %>
    </div>

    <div class="flex items-center gap-4 text-gray-700 dark:text-gray-200 relative">
      <!-- Notification Button -->
      <button id="dropdownNotificationButton" data-dropdown-toggle="dropdownNotification" class="relative inline-flex items-center text-sm font-medium text-center text-gray-500 hover:text-gray-900 focus:outline-none dark:hover:text-white dark:text-gray-400" type="button">
        <svg class="w-8 h-8 text-[#0A1629] animate-wiggle" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 21 21">
          <path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
                d="M15.585 15.5H5.415A1.65 1.65 0 0 1 4 13a10.526 10.526 0 0 0 1.5-5.415V6.5a4 4 0 0 1 4-4h2a4 4 0 0 1 4 4v1.085c0 1.907.518 3.78 1.5 5.415a1.65 1.65 0 0 1-1.415 2.5zm1.915-11c-.267-.934-.6-1.6-1-2s-1.066-.733-2-1m-10.912 3c.209-.934.512-1.6.912-2s1.096-.733 2.088-1M13 17c-.667 1-1.5 1.5-2.5 1.5S8.667 18 8 17" />
        </svg>

        <!-- Red dot visibility dynamically controlled here -->
        <div id="notification-dot" class="absolute block w-3 h-3 bg-red-500 border-2 border-white rounded-full -top-0.5 start-2.9 dark:border-gray-900 hidden"></div>
      </button>

      <!-- Notification Dropdown Menu -->
      <div id="dropdownNotification" class="z-50 hidden absolute top-0 mt-8 w-80 bg-white divide-y divide-gray-100 rounded-lg shadow-md dark:bg-gray-800 dark:divide-gray-700" aria-labelledby="dropdownNotificationButton">
        <div class="block px-4 py-2 font-medium text-center text-gray-700 rounded-t-lg bg-gray-50 dark:bg-gray-800 dark:text-white">
          Notifications
        </div>
        <div class="divide-y divide-gray-100 dark:divide-gray-700">
          <div id="notifications-container" class="flex flex-col p-4 space-y-4"></div>
        </div>
        <!-- View All Link -->
        <div class="px-4 py-2 text-center">
          <a href="/notifications" class="text-sm text-blue-600 hover:underline dark:text-blue-500">View All</a>
        </div>
      </div>
    </div>

    <ul class="flex items-center space-x-4">
      <%= link_to edit_user_registration_path do %>
        <li class="flex items-center p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700">
          <% if current_user.profile_picture.attached? %>
            <%= image_tag current_user.profile_picture, class: 'w-10 h-10 rounded-full' %>
          <% elsif current_user.name_initials.present? %>
            <p class="w-10 h-10 flex items-center justify-center bg-gray-300 dark:bg-gray-600 rounded-full text-white"><%= current_user.name_initials %></p>
          <% else %>
            <%= image_tag 'default.png', class: 'w-10 h-10 rounded-full' %>
          <% end %>
          <span class="ml-3 text-gray-700 dark:text-gray-200">
            <% unless %w[editor creator].include?(current_user.roles.first.name.downcase) %>
              Role: <span class="capitalize"><%= current_user.roles.first.name %></span>
            <% end %>
          </span>
          <svg class="w-2.5 h-2.5 ms-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
          </svg>
        </li>
      <% end %>
    </ul>
  </div>
<% end %>

<script>
  document.addEventListener('turbo:load', function() {
    const notificationButton = document.getElementById('dropdownNotificationButton');
    const notificationDropdown = document.getElementById('dropdownNotification');
    const notificationDot = document.getElementById('notification-dot');
    const notificationsContainer = document.getElementById('notifications-container');

    notificationButton.addEventListener('click', function() {
      notificationDropdown.classList.toggle('hidden');
    });

    function fetchNotifications() {
      fetch('/notifications', { method: 'GET', headers: { 'Accept': 'application/json', 'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content } })
        .then(response => response.json())
        .then(data => {
          notificationsContainer.innerHTML = '';
          data.notifications.forEach(notification => {
            const notificationElement = document.createElement('div');
            notificationElement.classList.add('flex', 'px-4', 'py-3', 'hover:bg-gray-100', 'dark:hover:bg-gray-700');
            if (!notification.read) notificationElement.classList.add('bg-gray-100');

            notificationElement.innerHTML = ` 
              <div class="flex-shrink-0">
                <p class="w-11 h-11 flex items-center justify-center bg-gray-300 dark:bg-gray-600 rounded-full text-white">
                  ${notification.user_initials}
                </p>
              </div>
              <div class="w-full ps-3">
                <div class="text-gray-500 text-sm mb-1.5 dark:text-gray-400">${notification.message}</div>
                <div class="text-xs text-blue-600 dark:text-blue-500">${notification.time_ago} ago</div>
                <div class="mt-2 flex justify-between">
                  <button class="text-xs text-green-600 hover:underline mark-read" data-id="${notification.id}" ${notification.read ? 'hidden' : ''}>Mark as Read</button>
                  <button class="text-xs text-red-600 hover:underline mark-unread" data-id="${notification.id}" ${!notification.read ? 'hidden' : ''}>Mark as Unread</button>
                </div>
              </div>
            `;
            notificationsContainer.appendChild(notificationElement);
          });

          if (data.unread_count > 0) {
            notificationDot.classList.remove('hidden');
          } else {
            notificationDot.classList.add('hidden');
          }

          document.querySelectorAll('.mark-read').forEach(button => {
            button.addEventListener('click', () => updateNotificationStatus(button.dataset.id, true));
          });

          document.querySelectorAll('.mark-unread').forEach(button => {
            button.addEventListener('click', () => updateNotificationStatus(button.dataset.id, false));
          });
        });
    }

    function updateNotificationStatus(notificationId, markAsRead) {
      const url = markAsRead ? `/notifications/${notificationId}/mark_as_read` : `/notifications/${notificationId}/mark_as_unread`;

      fetch(url, { method: 'PATCH', headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content } })
        .then(() => fetchNotifications())
        .catch(error => console.error('Error updating notification:', error));
    }

    fetchNotifications();
    setInterval(fetchNotifications, 5000);
  });
</script>
